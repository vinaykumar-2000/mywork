package com.capstone.mobilestore.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

public class MobileSecurityConfig {

	@Autowired
    private JwtAuthenticationEntryPoint authenticationEntryPoint;

    @Autowired
    private JwtAuthenticationFilter authenticationFilter;

    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

        http.csrf(csrf -> csrf.disable())
                .authorizeHttpRequests((authorize) -> {
                    // Permit all requests to auth endpoints
                    authorize.requestMatchers("/api/auth/**", "/api/register", "/api/login").permitAll();
                    // Open Swagger documentation for easier testing
                    authorize.requestMatchers("/v3/api-docs/**", "/swagger-ui/**", "/swagger-ui.html").permitAll();
                    // Permit CORS pre-flight requests
                    authorize.requestMatchers(HttpMethod.OPTIONS, "/**").permitAll();
                    // Require authentication for all other requests
                    authorize.anyRequest().authenticated();
                })
                .httpBasic(Customizer.withDefaults());

        // Handle authentication exceptions
        http.exceptionHandling(exception -> exception
                .authenticationEntryPoint(authenticationEntryPoint));

        // Add JWT authentication filter
        http.addFilterBefore(authenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
}
