package com.mobilestore.apigateway.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.HttpHeaders;
import org.springframework.http.server.ServerHttpRequest;
import org.springframework.util.StringUtils;
import org.springframework.web.server.ServerWebExchange;

import reactor.core.publisher.Mono;

public class JwtAuthenticationFilter implements GlobalFilter, Ordered{
	
	  private static final Logger log = LoggerFactory.getLogger(JwtAuthenticationFilter.class);
	  
	@Autowired
    private JwtTokenProvider tokenProvider;


	@Override
	public int getOrder() {
		 return -100;
	}

	@Override
	public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
		  String token = extractJwtFromRequest(exchange.getRequest());
	        if (token != null && tokenProvider.validateToken(token)) {
	            exchange = exchange.mutate().request(r -> r.header("Authenticated-UserId", String.valueOf(tokenProvider.getUserIdFromJWT(token)))).build();
	        } else {
	            return unauthorizedResponse(exchange);
	        }
	        return chain.filter(exchange);
	    }

	    private String extractJwtFromRequest(ServerHttpRequest request) {
	        String bearerToken = request.getHeaders().getFirst(HttpHeaders.AUTHORIZATION);
	        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
	            return bearerToken.substring(7);
	        }
	        return null;
	    }
}
