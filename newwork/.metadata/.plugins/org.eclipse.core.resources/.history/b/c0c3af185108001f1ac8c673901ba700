package com.capstone.mobilestore.controller;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.capstone.mobilestore.entity.Cart;
import com.capstone.mobilestore.entity.CartItem;
import com.capstone.mobilestore.exception.ItemNotFoundException;
import com.capstone.mobilestore.service.CartServiceImpl;

@RestController
@RequestMapping("/cart")
public class CartController {
	
	 @Autowired
	    private CartServiceImpl cartService;

	 @GetMapping("/{cartId}")
	    public ResponseEntity<Cart> getCartById(@PathVariable Long cartId) throws ItemNotFoundException {
	        Cart cart = cartService.getCartById(cartId);
	        return ResponseEntity.ok(cart);
	    }

	    @PostMapping("/{cartId}/add")
	    public ResponseEntity<Cart> addItemToCart(@PathVariable Long cartId, @RequestParam Long mobileId, @RequestParam int quantity) throws ItemNotFoundException {
	        Cart updatedCart = cartService.addItemToCart(cartId, mobileId, quantity);
	        return ResponseEntity.status(HttpStatus.CREATED).body(updatedCart);
	    }

	    @DeleteMapping("/{cartId}/items/{itemId}")
	    public ResponseEntity<Cart> removeItemFromCart(@PathVariable Long cartId, @PathVariable Long itemId) throws ItemNotFoundException {
	        Cart updatedCart = cartService.removeItemFromCart(cartId, itemId);
	        return ResponseEntity.ok(updatedCart);
	    }

	    @PutMapping("/items/{itemId}")
	    public ResponseEntity<CartItem> updateItemQuantity(@PathVariable Long itemId, @RequestParam int quantity) throws ItemNotFoundException {
	        CartItem updatedItem = cartService.updateItemQuantity(itemId, quantity);
	        return ResponseEntity.ok(updatedItem);
	    }
}
