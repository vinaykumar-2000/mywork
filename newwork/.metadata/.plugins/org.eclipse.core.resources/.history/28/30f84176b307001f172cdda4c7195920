package com.capstone.mobilestore.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.capstone.mobilestore.entity.Cart;
import com.capstone.mobilestore.entity.CartItem;
import com.capstone.mobilestore.exception.ItemNotFoundException;
import com.capstone.mobilestore.model.Mobile;
import com.capstone.mobilestore.repository.CartItemRepository;
import com.capstone.mobilestore.repository.CartRepository;

@Service
public class CartServiceImpl implements CartService{
	
	@Autowired
	private CartRepository cartRepository;

	@Autowired
    private CartItemRepository cartItemRepository;
	
	@Autowired
	private MobileConsumer mobileConsumer;

	@Override
	public Cart addToCart(Long customerId, Long mobileId) throws ItemNotFoundException {
		// 1. Find the Cart for the customer (create a new one if it doesn't exist)
        Cart cart = cartRepository.findByUserId(customerId);
        if (cart == null) {
            cart = new Cart();
            cart.setUserId(customerId); // Assuming User entity exists
            cart = cartRepository.save(cart);
        }

        // 2. Find the Mobile by ID (handle potential item not found exception)
        Mobile mobile = mobileConsumer.getMobileById(mobileId);
        if (mobile == null) {
            throw new ItemNotFoundException("Mobile with ID " + mobileId + " not found");
        }

        CartItem newItem = new CartItem();
        newItem.setCart(cart);
        newItem.setMobile(mobile);
        newItem.setQuantity(1);
        // Calculate itemTotal in service layer (see below)
        newItem.setItemTotal(calculateItemTotal(mobile, newItem.getQuantity()));

        cartItemRepository.save(newItem);
        cart.getCartItems().add(newItem);
        cartRepository.save(cart);

        return cart;
	}

	private double calculateItemTotal(Mobile mobile, int quantity) {
		
		return mobile.getPrice() * quantity;
	}

	@Override
	public void removeFromCart(Long cartId, Long mobileId) throws ItemNotFoundException {
		 // 1. Find the Cart by ID
        Cart cart = cartRepository.findById(cartId).orElseThrow(() ->
                new ItemNotFoundException("Cart with ID " + cartId + " not found"));

        // 2. Find the CartItem by Cart and Mobile ID
        CartItem itemToRemove = cartItemRepository.findByCartAndMobile(cart, new Mobile());

        // 3. Handle item not found in cart scenario
        if (itemToRemove == null) {
            throw new ItemNotFoundException("Item with Mobile ID " + mobileId + " not found in cart");
        }

        // 4. Remove the item from CartItems
        cartItemRepository.delete(itemToRemove);
		
	}

	@Override
	public void updateQuantity(Long cartId, Long mobileId, int newQuantity) throws ItemNotFoundException {
		// 1. Find the Cart by ID
        Cart cart = cartRepository.findById(cartId).orElseThrow(() ->
                new ItemNotFoundException("Cart with ID " + cartId + " not found"));

        // 2. Find the CartItem by Cart and Mobile ID
        CartItem itemToUpdate = cartItemRepository.findByCartAndMobile(cart, new Mobile());

        // 3. Handle item not found in cart scenario
        if (itemToUpdate == null) {
            throw new ItemNotFoundException("Item with Mobile ID " + mobileId + " not found in cart");
        }

        // 4. Update quantity and item total
        itemToUpdate.setQuantity(newQuantity);
        itemToUpdate.setItemTotal(newQuantity * itemToUpdate.getMobile().getPrice());
        cartItemRepository.save(itemToUpdate);
		
	}

	@Override
	public Cart getCartDetails(Long cartId) throws ItemNotFoundException {
		// 1. Find the Cart by ID (consider eager fetching for cartItems if performance is critical)
        Cart cart = cartRepository.findById(cartId).orElseThrow(() ->
                new ItemNotFoundException("Cart with ID " + cartId + " not found"));

        // Optional: Eager fetching for performance optimization (configure JPA accordingly)
        // Cart cart = cartRepository.findByIdWithItems(cartId); // Assuming a custom findByIdWithItems method

        return cart;
	}
}