package com.capstone.mobilestore.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.capstone.mobilestore.entity.CartItem;
import com.capstone.mobilestore.exception.ItemNotFoundException;
import com.capstone.mobilestore.model.CartItemResponse;
import com.capstone.mobilestore.model.Mobile;
import com.capstone.mobilestore.repository.CartItemRepository;

@Service
public class CartItemServiceImpl implements CartItemService {

	@Autowired
	private CartItemRepository cartItemRepository;

	@Autowired
	private MobileServiceConsumer mobileServiceConsumer;

	@Override
	public CartItem addOrUpdateItem(Long cartId, Long mobileId, int quantity) throws ItemNotFoundException {
		Mobile mobile = mobileServiceConsumer.getMobileDetails(mobileId);

	    if (mobile == null) {
	        throw new ItemNotFoundException("Mobile not found with id: " + mobileId);
	    }

	    CartItem cartItem = cartItemRepository.findByCartIdAndMobileId(cartId, mobileId);
	    if (cartItem == null) {
	        cartItem = new CartItem();
	        cartItem.setId(cartId);  
	        cartItem.setMobileId(mobileId);
	    }

	    cartItem.setQuantity(quantity);
	    updateItemTotal(cartItem, mobile.getPrice());  

	    return cartItemRepository.save(cartItem);
	}

	private void updateItemTotal(CartItem cartItem, double price) {
	    double total = cartItem.getQuantity() * price;
	    cartItem.setItemTotal(total);
	}
	
	@Override
	public boolean removeItem(Long itemId) throws ItemNotFoundException {
		if (cartItemRepository.existsById(itemId)) {
			cartItemRepository.deleteById(itemId);
			return true;
		}
		return false;
	}

	@Override
	public CartItem updateQuantity(Long itemId, int quantity) throws ItemNotFoundException {
		CartItem cartItem = cartItemRepository.findById(itemId)
				.orElseThrow(() -> new ItemNotFoundException("CartItem not found with id: " + itemId));
		cartItem.setQuantity(quantity);
		return cartItemRepository.save(cartItem);
	}

	@Override
	public CartItem getItemById(Long itemId) throws ItemNotFoundException {
		return cartItemRepository.findById(itemId)
				.orElseThrow(() -> new ItemNotFoundException("CartItem not found with id: " + itemId));
	}

	@Override
	public CartItemResponse getMobileDetailsForCartItem(Long cartItemId) {
		 Optional<CartItem> optionalCartItem = cartItemRepository.findById(cartItemId);
		    if (optionalCartItem.isEmpty()) {
		        throw new ItemNotFoundException("CartItem not found with Id : " + cartItemId);
		    }
		    CartItem cartItem = optionalCartItem.get();
		    
		    CartItemResponse cartItemResponse = new CartItemResponse();
		    cartItemResponse.setId(cartItem.getId());
		    cartItemResponse.setQuantity(cartItem.getQuantity());
		   

		    Mobile mobile = mobileServiceConsumer.getMobileDetails(cartItem.getMobileId());
		    cartItemResponse.setMobile(mobile);
		   

		    return cartItemResponse;
	}

}
